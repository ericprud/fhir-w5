#!/usr/bin/env node

const Fs = require('fs')
const Yaml = require('js-yaml')

const STRUC_DEF = 'http://hl7.org/fhir/StructureDefinition/'
const META_DEFS = [
  'Bundle',
  'DomainResource',
  'Resource',
  'StructureDefinition',  
]
const WRITE_TRIMMED_FILE = false // 'trimmed.json'

const inFile = process.argv[2]
const outFile = process.argv[3]

// profiles-resources.json is a bundle with ~150 regular-use resources
const rootBundle = JSON.parse(Fs.readFileSync(inFile, 'utf-8'))
// resources will become a those regular-use resources
let resources = rootBundle.entry
const lastUpdated = rootBundle.meta.lastUpdated

// trim to regular-use resources 
console.warn(`starting with ${resources.length} entries`)
resources = resources.filter(
  e => e.fullUrl.startsWith(STRUC_DEF)
    && e.resource.resourceType !== 'CapabilityStatement'
    && e.resource.resourceType !== 'CompartmentDefinition'
    && e.resource.id !== 'CompartmentDefinition'
    && META_DEFS.indexOf(e.resource.id) === -1
)
console.warn(`trimmed to ${resources.length} entries`)

// trim extra stuff that takes a lot of space
resources.forEach(e => {
  delete e.resource.text
  delete e.resource.snapshot
})

if (WRITE_TRIMMED_FILE) {
  rootBundle.entry = resources
  Fs.writeFileSync(WRITE_TRIMMED_FILE, JSON.stringify(rootBundle, null, 2))
}
delete rootBundle

// console.warn(resources.map(e => `${e.resource.id} / ${e.fullUrl}`).join('\n'))

const names = resources.reduce( (names, entry) => {
  const r = entry.resource
  const fields = r.differential.element
  const root = fields.shift()
  if (!root.id.match(/^[A-Za-z]+2?$/))
    throw Error(`${root.id} unexpected in ${root}`)
  fields.forEach(f => {
    const hier = f.id.split(/\./)
    const name = hier.pop()
    if (!(name in names))
      names[name] = {w5: {}, bare: []}

    let w5 = null
    if ('mapping' in f) {
      const m = f.mapping.find(m => m.identity === 'w5')
      if (m && 'map' in m)
        w5 = m.map
    }

    if (w5) {
      if (!(w5 in names[name].w5))
        names[name].w5[w5] = []
      names[name].w5[w5].push(hier.join('.'))
    } else {
      names[name].bare.push(hier.join('.'))
    }
  })
  return names
}, {})

const [all, some, none, singles] = Object.keys(names).sort().reduce(([all, some, none, singles], name) => {
  const entry = names[name]
  if (entry.bare.length === 0) {
    if (Object.keys(entry.w5).length === 1) {
      singles.push(name)
    } else {
      all.push(name)
    }
  } else if (Object.keys(entry.w5).length === 0) {
    if (entry.bare.length === 1) {
      singles.push(name)
    } else {
      none.push(name)
    }
  } else {
    some.push(name)
  }
  return [all, some, none, singles]
}, [[], [], [], []])

const summary = { }
summary[`All mapped (${all.length})`] = all.reduce(
  (acc, name) => appendObj(acc, name, names[name].w5), {}
)
summary[`None mapped (${none.length})`] = none.reduce(
  (acc, name) => appendObj(acc, name, names[name].bare), {}
)
summary[`Some mapped (${some.length})`] = some.reduce(
  (acc, name) => appendObj(acc, name, names[name]), {}
)
summary[`Singles (${singles.length})`] = singles.reduce(
  (acc, name) => appendObj(acc, name, names[name]), {}
)
console.log(Yaml.dump(summary))

function appendObj (obj, key, value) {
  if (key in obj) throw new Error(`${key} already bound to ${obj[key]}`)
  obj[key] = value
  return obj
}

